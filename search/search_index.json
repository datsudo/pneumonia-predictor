{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Pneumonia Admission Predictor Documentation <p>This app helps predict the likelihood of hospital admission for patients with pneumonia. By analyzing key medical indicators and patient data, it provides healthcare professionals with insights to make more informed decisions, optimizing patient care and resource allocation.</p> <p>For predictor, we provided two machine learning models:</p> <ul> <li><code>RfActiveSMOTE</code>, and</li> <li><code>RfSMOTE</code></li> </ul> <p>To use them with your own datasets, see usage page.</p> <p>The application is currently hosted at Hugging Face: https://huggingface.co/spaces/datsudo/pneumonia-predictor.</p> <p>To set it up locally, follow the setup instructions.</p> <p>The source code is currently hosted on GitHub</p>"},{"location":"about/about-the-project/","title":"About this project","text":"<p>The core of this program\u2014the <code>Rf-ActiveSMOTE</code> model\u2014is a proposal model from our thesis titled \"Pneumonia Admission Predictor Using Random Forest Integrated with Active SMOTE\".</p> <p><code>RF-ActiveSMOTE</code> is a combination of Active SMOTE (Synthetic Minority Oversampling TEchnique), together with Random Forest (RF) classification algorithm. The Active SMOTE was initially proposed by Sena &amp; Ben Hamida in their paper: Active SMOTE for Imbalanced Medical Data Classification, that was published in January 2024. RF was combined with this to mitigate some of the SMOTE's issues. Primarily on how it selects the samples needed to generate synthetic data.</p>"},{"location":"about/license/","title":"License","text":"GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007 <p>Copyright (C) 2024  Villanueva, Juat, Malapit, Pardilla</p> <p>This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.</p> <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.</p> <p>You should have received a copy of the GNU General Public License along with this program.  If not, see https://www.gnu.org/licenses/.</p>"},{"location":"api-reference/","title":"API Reference","text":""},{"location":"api-reference/#pneumonia_predictorbackend","title":"pneumonia_predictor.backend","text":"<ul> <li><code>rf_active_smote.RfActiveSMOTE</code></li> <li><code>rf_smote.RfSMOTE</code></li> </ul>"},{"location":"api-reference/rf-active-smote/","title":"rf_active_smote.RfActiveSMOTE","text":"<p>A random forest model (uses <code>sklearn.ensemble.RandomForestClassifier</code>) integrated with Active SMOTE (uses <code>pneumonia_predictor.backend.active_smote.ActiveSMOTE</code>).</p> <p>The source code for this model can be accessed in <code>pneumonia_predictor.backend.rf_active_smote</code>. Some of the parameters' default values can be found in <code>pneumonia_predictor.config</code>.</p> <code>rf_active_smote.RfActiveSMOTE(X_train, y_train, X_test, y_test, target_name, num_est, num_clusters, sampling_ratio)</code>"},{"location":"api-reference/rf-active-smote/#parameters","title":"Parameters","text":"<ul> <li><code>X_train</code> : <code>pandas.DataFrame</code> - the training feature set</li> <li><code>y_train</code> : <code>pandas.DataFrame</code> - the target labels for training set</li> <li><code>X_test</code> : <code>pandas.DataFrame</code> - the test feature set</li> <li><code>y_test</code> : <code>pandas.DataFrame</code> - the target labels for test set</li> <li><code>target_name</code> : <code>str</code> - the name of the target feature</li> <li><code>num_est</code> : <code>int</code>, default <code>config.N_ESTIMATORS</code> - the name of the target feature</li> <li><code>num_clusters</code> : <code>int</code>, default <code>config.N_CLUSTERS</code> - number of clusters for k-means clustering part of Active SMOTE</li> <li><code>sampling_ratio</code> : <code>float</code>, default <code>config.SAMPLING_RATIO</code></li> </ul>"},{"location":"api-reference/rf-active-smote/#methods","title":"Methods","text":""},{"location":"api-reference/rf-active-smote/#trainn_iterations","title":"<code>train(n_iterations)</code>","text":"<p>Method that trains the model.</p>"},{"location":"api-reference/rf-active-smote/#parameters_1","title":"Parameters","text":"<ul> <li><code>n_iterations</code> : <code>int</code> (default <code>config.N_ITERATIONS</code>) - number of retrains the model will do</li> </ul>"},{"location":"api-reference/rf-active-smote/#display_resultsopt","title":"<code>display_results(opt)</code>","text":"<p>Display line graph of model training's performance report.</p>"},{"location":"api-reference/rf-active-smote/#parameters_2","title":"Parameters","text":"<ul> <li><code>opt</code> : <code>str</code> - chosen metric to display; options are the following: <code>acc</code> (accuracy), <code>min</code> (minority class' performance), <code>maj</code> (majority class performance), and <code>avg</code> (weighted average of both class' performance)</li> </ul>"},{"location":"api-reference/rf-active-smote/#savemodel_name","title":"<code>save(model_name)</code>","text":"<p>Method to save the model as a pickle (<code>.pkl</code>) file. The destination is located at <code>project_root/saved_models</code> by default. You can change it in <code>config.SAVED_MODELS_PATH</code>.</p>"},{"location":"api-reference/rf-active-smote/#parameters_3","title":"Parameters","text":"<ul> <li><code>model_name</code> : <code>str</code> - name of the pickle file</li> </ul>"},{"location":"api-reference/rf-smote/","title":"rf_smote.RfSMOTE","text":"<p><code>RfSMOTE</code> acts as the baseline for the <code>RfActiveSMOTE</code> model. This is a combination of random forest and traditional, plain SMOTE method.</p> <p>The source code for this model can be accessed in <code>pneumonia_predictor.backend.rf_smote</code>. Some of the parameters' default values can be found in <code>pneumonia_predictor.config</code>.</p> <code>rf_smote.RfSMOTE(X_train, y_train, X_test, y_test, target_name, num_est)</code>"},{"location":"api-reference/rf-smote/#parameters","title":"Parameters","text":"<ul> <li><code>X_train</code> : <code>pandas.DataFrame</code> - the training feature set</li> <li><code>y_train</code> : <code>pandas.DataFrame</code> - the target labels for training set</li> <li><code>X_test</code> : <code>pandas.DataFrame</code> - the test feature set</li> <li><code>y_test</code> : <code>pandas.DataFrame</code> - the target labels for test set</li> <li><code>target_name</code> : <code>str</code> - the name of the target feature</li> <li><code>num_est</code> : <code>int</code>, default <code>config.N_ESTIMATORS</code> - amount of decision trees the random forest should build</li> </ul>"},{"location":"api-reference/rf-smote/#methods","title":"Methods","text":""},{"location":"api-reference/rf-smote/#train","title":"<code>train()</code>","text":"<p>Method that trains the model.</p>"},{"location":"api-reference/rf-smote/#savemodel_name","title":"<code>save(model_name)</code>","text":"<p>Method to save the model as a pickle (<code>.pkl</code>) file. The destination is located at <code>project_root/saved_models</code> by default. You can change it in <code>config.SAVED_MODELS_PATH</code>.</p>"},{"location":"getting-started/model-usage/","title":"Model Usage","text":"<p>Assuming that your dataset already undergoes a proper preprocessing pipeline and data splitting (into training and testing sets), you are now ready to use both <code>RfActiveSMOTE</code> and <code>RfSMOTE</code>. See the API reference for more details.</p> <pre><code>from pneumonia_predictor.backend.rf_active_smote import RfActiveSMOTE\nfrom pneumonia_predictor.backend.rf_smote import RfSMOTE\n\nrf_active_smote = RfActiveSMOTE(\n    X_train, y_train,\n    X_test, y_test,\n    \"pneumonia_admission\"\n)\n\nrf_smote = RfSMOTE(\n    X_train, y_train,\n    X_test, y_test,\n    \"pneumonia_admission\"\n)\n</code></pre> <p>Both models have <code>train()</code> methods, except that <code>rf_active_smote.train()</code> can optionally accepts <code>n_iterations</code> parameter to state that the model should do N number of retrains (default value is <code>config.N_ITERATIONS = 5</code>).</p> <pre><code>rf_active_smote.train(4)\nrf_smote.train()\n</code></pre> <p>\u2139\ufe0f Logging is enabled by default\u2014every step of model training is being logged in <code>logs.txt</code>. To turn this off, change the value of <code>config.LOGFILE_ENABLED</code> to <code>False</code>.</p> <p>Both models have <code>save()</code> method for saving trained models as a pickle file (<code>.pkl</code>) with the help of joblib. The pickles are saved in <code>project-root/saved_models</code> by default (specified in <code>config.SAVED_MODELS_PATH</code>).</p> <pre><code># will be saved as saved_models/rf_active_smote_model.pkl\nrf_active_smote.save(\"rf_active_smote_model\")\n\n# will be saved as saved_models/rf_smote_model.pkl\nrf_smote.save(\"rf_smote_model\")\n</code></pre>"},{"location":"getting-started/setup/","title":"Local Setup","text":""},{"location":"getting-started/setup/#prerequisites","title":"Prerequisites","text":"<p>To setup the project, you must have the following prerequisites installed on your machine:</p> <ul> <li>Python (3.12+)</li> <li>Poetry (1.8.3+) - for managing dependencies and virtual environment</li> </ul>"},{"location":"getting-started/setup/#setting-up-the-environment","title":"Setting up the environment","text":"<p>Clone first the repository:</p> <pre><code>git clone https://github.com/datsudo/pneumonia-predictor.git\n</code></pre> <p>Then install the dependencies (see pyproject.toml):</p> <pre><code>cd pneumonia-predictor\npoetry install\n</code></pre> <p>You can now start the virtual environment</p> <pre><code>poetry shell\n</code></pre> <p>\u2139\ufe0f [Optional] If you want to contribute:</p> <p>Run <code>pre-commit install</code> to setup pre-commit hooks that performs automatic code formatting and linting with Ruff.</p>"},{"location":"getting-started/setup/#running-the-app","title":"Running the app","text":"<p>The interface for this program uses Streamlit. Assuming that you're in the root folder in your terminal, you can try it out by running</p> <pre><code>streamlit run app.py\n</code></pre> <p>This should automatically visit the website. If not, go to http://127.0.0.1:8501. Tweak <code>app.py</code> to edit the page.</p>"}]}